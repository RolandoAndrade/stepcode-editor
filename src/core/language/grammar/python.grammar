@precedence {
  typeargs,
  typeMember,
  typePrefix,
  intersection @left,
  union @left,
  typeExtends @right,
  else @right,
  member,
  readonly,
  newArgs,
  call,
  taggedTemplate,
  prefix,
  postfix,
  typeof,
  exp @left,
  times @left,
  plus @left,
  shift @left,
  loop,
  rel @left,
  satisfies,
  equal @left,
  bitOr @left,
  bitXor @left,
  bitAnd @left,
  and @left,
  or @left,
  ternary @right,
  assign @right,
  comma @left,
  statement @cut,
  predicate
}

@top Program { ProgramDefinition }

ProgramDefinition[@isGroup=Program]{
  kw<"Proceso"> ProgramName
  Body
  kw<"FinProceso">
}

Body { statement+ }

statement[@isGroup=Statement] {
  (simpleStatement | compoundStatement)
}

simpleStatement {
  DefineStatement {
    kw<'Definir'> commaSep<VariableName> kw<'Como'> VariableType semi
  } |
  WriteStatement {
    kw<'Escribir'> commaSep<String | VariableName> semi
  } |
  ReadStatement {
    kw<'Leer'> commaSep<VariableName> semi
  } |
  ExpressionStatement { expression semi }

}

compoundStatement {
  IfStatement {
    kw<'Si'> expression kw<'Entonces'>
    Body
    (!else kw<"Sino"> Body)?
    kw<'FinSi'>
  }
}

expression[@isGroup=Expression] {
  Number | String |
  BinaryExpression |
  VariableName |
  AssignmentExpression |
  ParenthesizedExpression
}

ParenthesizedExpression { "(" expression ")" }

BinaryExpression {
  expression !plus ArithOp<"+" | "-"> expression |
  expression !times divide | mod | intDivide | ArithOp<"*"> expression|
  expression !exp ArithOp<"**"|'^'> expression |
  expression !equal CompareOp<"=" | "!="> expression |
  expression !rel (LessThan | CompareOp<"≤" | ">" | "≥">) expression |
  expression !and LogicOp<"Y"> expression |
  expression !or LogicOp<"O"> expression
}

AssignmentExpression {
  VariableName !assign "←" expression
}

ArrayExpression { "[" commaSep<expression>? "]" }


ProgramName { identifier }

VariableName { identifier }

VariableType {
  kw<'Entero'> | kw<'Real'> | kw<'Logico'> | kw<'Cadena'> | kw<'Caracter'>
}

@skip { spaces | newline | LineComment }
kw<term> { @specialize[@name={term}]<identifier, term> }

commaSep<expr> { expr ("," expr)* ","? }

@tokens {
  spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export] { $[\r\n\u2028\u2029] }

  LineComment { ("//" | '#') ![\n]* }

  divide[@name=ArithOp] { "/" }

  intDivide[@name=ArithOp] { "div" }
  mod[@name=ArithOp] {"mod"}


  @precedence { "/", LineComment, divide }
  @precedence { "div", identifier, intDivide }
  @precedence { "mod", identifier, mod }

  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | @digit)* }

  identifier { word }

  privateIdentifier { "#" word }

  @precedence { spaces, newline, identifier }

  @precedence { spaces, newline }

  @precedence { spaces, newline, word }

  hex { @digit | $[a-fA-F] }

  Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)? |
    @digit ("_" | @digit)* "n" |
    "0x" (hex | "_")+ "n"? |
    "0b" $[01_]+ "n"? |
    "0o" $[0-7_]+ "n"?
  }

  @precedence { Number "." }

  Escape {
    "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
  }

  stringContentSingle { ![\\\n']+ }

  stringContentDouble { ![\\\n"]+ }

  templateStart { "`" }

  InterpolationEnd[openedBy=InterpolationStart] { "}" }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  BitOp<expr> { expr }
  CompareOp<expr> { expr }
  UpdateOp<expr> { expr }

  RegExp { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ ("/" $[gimsuy]*)? }

  LessThan[@name=CompareOp] { "<" }

  "←"[@name=Equals]

  @precedence { "←", Equals, identifier}
  @precedence { CompareOp, identifier}
  @precedence { LogicOp, identifier}

  "..."[@name=Spread]
  "=>"[@name=Arrow]

  "(" ")" "[" "]" "{" "}" ">" "≥"

  "?." "." "," ";" ":" "@" "Y" "O"
}

@skip {} {
  String {
    '"' (stringContentDouble)* ('"' | "\n") |
    "'" (stringContentSingle)* ("'" | "\n")
  }
}

semi { ";" }
