@precedence {
  cond,
  trail,
  power @right,
  prefix,
  times @left,
  plus @left,
  shift @left,
  bitand @left,
  xor @left,
  bitor @left,
  compare @left,
  as @left,
  and @left,
  or @left
}

@top Program { ProgramDefinition }

ProgramDefinition[@isGroup=Program]{
  kw<"Proceso"> ProgramName
  Body
  kw<"FinProceso">
}

Body { statement+ }

statement[@isGroup=Statement] {
  simpleStatement
  ";"
}

simpleStatement {
  DefineStatement {
    kw<'Definir'> commaSep<VariableName> kw<'Como'> VariableType
  } |
  WriteStatement {
    kw<'Escribir'> commaSep<String | VariableName>
  } |
  ReadStatement {
    kw<'Leer'> commaSep<VariableName>
  }
}

compoundStatement {
  kw<'if'>
}

ProgramName { identifier }

VariableName { identifier }

VariableType {
  kw<'Entero'> | kw<'Real'> | kw<'Logico'> | kw<'Cadena'> | kw<'Caracter'>
}

@skip { spaces | newline | LineComment }
kw<term> { @specialize[@name={term}]<identifier, term> }

commaSep<expr> { expr ("," expr)* ","? }

@tokens {
  spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export] { $[\r\n\u2028\u2029] }

  LineComment { ("//" | '#') ![\n]* }

  divide[@name=ArithOp] { "/" }

  @precedence { "/*", LineComment, divide }

  @precedence { "/*", LineComment, RegExp }

  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | @digit)* }

  identifier { word }

  privateIdentifier { "#" word }

  @precedence { spaces, newline, identifier }

  @precedence { spaces, newline }

  @precedence { spaces, newline, word }

  stringContentSingle { ![\\\n']+ }

  stringContentDouble { ![\\\n"]+ }

}

@skip {} {
  String {
    '"' (stringContentDouble)* ('"' | "\n") |
    "'" (stringContentSingle)* ("'" | "\n")
  }
}